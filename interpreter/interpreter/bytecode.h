#pragma once

#include "forward.h"
#include "enum.h"

namespace WASM {
	class Bytecode : public Enum<Bytecode, u8> {
	public:
		enum TEnum {
			Unreachable,
			JumpShort,
			JumpLong,
			IfTrueJumpShort,
			IfTrueJumpLong,
			IfFalseJumpShort,
			IfFalseJumpLong,
			JumpTable,
			ReturnFew,
			ReturnMany,
			Call,
			CallIndirect,
			CallHost,
			Entry,
			I32Drop,
			I64Drop,
			I32Select,
			I64Select,
			I32LocalGetFar,
			I32LocalSetFar,
			I32LocalTeeFar,
			I32LocalGetNear,
			I32LocalSetNear,
			I32LocalTeeNear,
			I64LocalGetFar,
			I64LocalSetFar,
			I64LocalTeeFar,
			I64LocalGetNear,
			I64LocalSetNear,
			I64LocalTeeNear,
			I32GlobalGet,
			I32GlobalSet,
			I64GlobalGet,
			I64GlobalSet,
			TableGet,
			TableSet,
			TableInit,
			ElementDrop,
			TableCopy,
			TableGrow,
			TableSize,
			TableFill,
			I32LoadNear,
			I64LoadNear,
			I32LoadFar,
			I64LoadFar,
			I32Load8s,
			I32Load8u,
			I32Load16s,
			I32Load16u,
			I64Load8s,
			I64Load8u,
			I64Load16s,
			I64Load16u,
			I64Load32s,
			I64Load32u,
			I32StoreNear,
			I64StoreNear,
			I32StoreFar,
			I64StoreFar,
			I32Store8,
			I32Store16,
			I64Store8,
			I64Store16,
			I64Store32,
			MemorySize,
			MemoryGrow,
			MemoryInit,
			DataDrop,
			MemoryCopy,
			MemoryFill,
			I32ConstShort,
			I32ConstLong,
			I64ConstShort,
			I64ConstLong,
			I32EqualZero,
			I32Equal,
			I32NotEqual,
			I32LesserS,
			I32LesserU,
			I32GreaterS,
			I32GreaterU,
			I32LesserEqualS,
			I32LesserEqualU,
			I32GreaterEqualS,
			I32GreaterEqualU,
			I64EqualZero,
			I64Equal,
			I64NotEqual,
			I64LesserS,
			I64LesserU,
			I64GreaterS,
			I64GreaterU,
			I64LesserEqualS,
			I64LesserEqualU,
			I64GreaterEqualS,
			I64GreaterEqualU,
			F32Equal,
			F32NotEqual,
			F32Lesser,
			F32Greater,
			F32LesserEqual,
			F32GreaterEqual,
			F64Equal,
			F64NotEqual,
			F64Lesser,
			F64Greater,
			F64LesserEqual,
			F64GreaterEqual,
			I32CountLeadingZeros,
			I32CountTrailingZeros,
			I32CountOnes,
			I32Add,
			I32Subtract,
			I32Multiply,
			I32DivideS,
			I32DivideU,
			I32RemainderS,
			I32RemainderU,
			I32And,
			I32Or,
			I32Xor,
			I32ShiftLeft,
			I32ShiftRightS,
			I32ShiftRightU,
			I32RotateLeft,
			I32RotateRight,
			I64CountLeadingZeros,
			I64CountTrailingZeros,
			I64CountOnes,
			I64Add,
			I64Subtract,
			I64Multiply,
			I64DivideS,
			I64DivideU,
			I64RemainderS,
			I64RemainderU,
			I64And,
			I64Or,
			I64Xor,
			I64ShiftLeft,
			I64ShiftRightS,
			I64ShiftRightU,
			I64RotateLeft,
			I64RotateRight,
			F32Absolute,
			F32Negate,
			F32Ceil,
			F32Floor,
			F32Truncate,
			F32Nearest,
			F32SquareRoot,
			F32Add,
			F32Subtract,
			F32Multiply,
			F32Divide,
			F32Minimum,
			F32Maximum,
			F32CopySign,
			F64Absolute,
			F64Negate,
			F64Ceil,
			F64Floor,
			F64Truncate,
			F64Nearest,
			F64SquareRoot,
			F64Add,
			F64Subtract,
			F64Multiply,
			F64Divide,
			F64Minimum,
			F64Maximum,
			F64CopySign,
			I32WrapI64,
			I32TruncateF32S,
			I32TruncateF32U,
			I32TruncateF64S,
			I32TruncateF64U,
			I64ExtendI32S,
			I64ExtendI32U,
			I64TruncateF32S,
			I64TruncateF32U,
			I64TruncateF64S,
			I64TruncateF64U,
			F32ConvertI32S,
			F32ConvertI32U,
			F32ConvertI64S,
			F32ConvertI64U,
			F32DemoteF64,
			F64ConvertI32S,
			F64ConvertI32U,
			F64ConvertI64S,
			F64ConvertI64U,
			F64PromoteF32,
			I32Extend8s,
			I32Extend16s,
			I64Extend8s,
			I64Extend16s,
			I64Extend32s,
			I32TruncateSaturateF32S,
			I32TruncateSaturateF32U,
			I32TruncateSaturateF64S,
			I32TruncateSaturateF64U,
			I64TruncateSaturateF32S,
			I64TruncateSaturateF32U,
			I64TruncateSaturateF64S,
			I64TruncateSaturateF64U,

			NumberOfItems
		};

		using Enum<Bytecode, u8>::Enum;
		Bytecode(TEnum e) : Enum<Bytecode, u8>{ e } {}

		const char* name() const;
		BytecodeArguments arguments() const;
	};

	class BytecodeArguments : public Enum<BytecodeArguments> {
	public:
		enum TEnum {
			None,
			SingleU8,
			SingleU32,
			DualU32,
			TripleU32,
			SingleU64,
			SingleU64SingleU32,
			DualU64,
			NumberOfItems
		};

		using Enum<BytecodeArguments>::Enum;
		BytecodeArguments(TEnum e) : Enum<BytecodeArguments>{ e } {}

		u32 count() const;
		bool isU8() const;
		bool isU32() const;
		bool isU64() const;
		u32 sizeInBytes() const;
	};
}
